#!/bin/bash

GO_VERSION=go1.9.4

GO_PKG_DARWIN=${GO_VERSION}.darwin-amd64.pkg
GO_PKG_DARWIN_SHA=e8523ffa01df5fcd51c3dbaca3e951bc716cfcc5d95273f7d4f64c94fdc80082

GO_PKG_LINUX=${GO_VERSION}.linux-amd64.tar.gz
GO_PKG_LINUX_SHA=15b0937615809f87321a457bb1265f946f9f6e736c563d6c5e0bd2c22e44f779

export ROOTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
cd $ROOTDIR

# If Go isn't installed globally, setup environment variables for local install.
if [ -z "$(which go)" ] || [ -z "$(go version | grep $GO_VERSION)" ]; then
  GODIR="$ROOTDIR/.vendor/go19"

  if [ $(uname -s) = "Darwin" ]; then
    export GOROOT="$GODIR/usr/local/go"
  else
    export GOROOT="$GODIR/go"
  fi

  export PATH="$GOROOT/bin:$PATH"
fi

# Check if local install exists, and install otherwise.
if [ -z "$(which go)" ] || [ -z "$(go version | grep $GO_VERSION)" ]; then
  [ -d "$GODIR" ] && rm -rf $GODIR
  mkdir -p "$GODIR"
  cd "$GODIR";

  if [ $(uname -s) = "Darwin" ]; then
    curl -L -O https://storage.googleapis.com/golang/$GO_PKG_DARWIN
    shasum -a256 $GO_PKG_DARWIN | grep $GO_PKG_DARWIN_SHA
    xar -xf $GO_PKG_DARWIN
    cpio -i < com.googlecode.go.pkg/Payload
  else
    curl -L -O https://storage.googleapis.com/golang/$GO_PKG_LINUX
    shasum -a256 $GO_PKG_LINUX | grep $GO_PKG_LINUX_SHA
    tar xf $GO_PKG_LINUX
  fi

  # Prove we did something right
  echo "$GO_VERSION installed in $GODIR: Go Binary: $(which go)"
fi

cd $ROOTDIR

# Configure the new go to be the first go found
export GOPATH=$ROOTDIR/.vendor
